// auto-generated by bsg_ascii_to_rom.py from /mnt/users/ssd1/homes/akashs3/basejump_stl/testing/bsg_dmc/bsg_tag_boot.tr; do not modify
module bsg_tag_boot_rom #(`BSG_INV_PARAM(width_p), `BSG_INV_PARAM(addr_width_p))
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // # PRO-TIP: Set editior syntax to bash (or sh)
                                 // ################################################################################
                                 // # DESIGN SPECIFIC TAG INFO
                                 // #
                                 // # Number | Description                       | Width
                                 // # -------+-----------------------------------+-------
                                 // #     0  | Delay Line Async Reset            | 1-bit
                                 // #   4-1  | Delay Line Ctrl Bits              | 8-bits
                                 // #   8-5  | Delay Line Trigger                | 1-bit
                                 // #   9-7  | 2x-to-1x Clock Downsampler Reset  | 1-bit
                                 // # 11-10  | DMC trefi                         | 8-bits
                                 // #    12  | DMC tmrd trfc                     | 8-bits
                                 // #    13  | DMC trc trp                       | 8-bits
                                 // #    14  | DMC tras trrd                     | 8-bits
                                 // #    15  | DMC trcd twr                      | 8-bits
                                 // #    16  | DMC twtr trtp                     | 8-bits
                                 // #    17  | DMC dqs_sel_cal tcas              | 8-bits
                                 // #    18  | DMC row col width                 | 8-bits
                                 // #    19  | DMC bank position width           | 8-bits
                                 // # 21-20  | DMC initialization cycles         | 8-bits
                                 // #    22  | DMC Async Reset                   | 1-bit
                                 // #	 23  | DMC stall_transmission			 | 1-bit
                                 // #	 24	 | Clkgen Async Reset				 | 1-bit
                                 // #	 25  | Clkgen Oscillator      			 | 5-bits
                                 // #    26  | Clkgen Osc Trigger     			 | 1-bit
                                 // #    27  | Clkgen Downsampler    			 | 7-bits
                                 // #
                                 // #
                                 // # Number of masters = 1
                                 // # Number of clients = 23
                                 // # Max data width = 8
                                 // #
                                 // # Packet lengths
                                 // # <4b>___<1b>___<5b>_1b_<4b>___<8b>
                                 // # <4b>___<19b>
                                 // #
                                 // # There is one tagmaster driving 23 clients in the traffic_generator. The 1 bit
                                 // # masterEn indicates whether the tag master is selected or not.
                                 // #
                                 // ################################################################################
                                 // # Tag Trace Replay Packet Format
                                 // #
                                 // # M = number of masters
                                 // # N = max(1, clog2(#_of_tag_clients))
                                 // # D = max(client_1_width, client_2_width, ..., client_n_width)
                                 // # L = clog2(D+1)
                                 // #
                                 // # |<    4-bits    >|< M-bits >|< N-bits >|<     1-bit    >|< L-bits >|< D-bits >|
                                 // # +----------------+----------+----------+----------------+----------+----------+
                                 // # | replay command | masterEn |  nodeID  | data_not_reset |  length  |   data   |
                                 // # +----------------+----------+----------+----------------+----------+----------+
                                 // #
                                 // # Replay Commands
                                 // #   0 = 0000 = Wait a cycle
                                 // #   1 = 0001 = Send data
                                 // #   2 = 0010 = Receive data
                                 // #   3 = 0011 = Assert done_o ouput signal
                                 // #   4 = 0100 = End test (calls $finish)
                                 // #   5 = 0101 = Wait for cycle_counter == 0
                                 // #   6 = 0110 = Initialize cycle_counter with a 16 bit number
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG MASTER
                                 // #
                                 // # First, we must reset the bsg_tag_master. To do this, we send a 1, then we
                                 // # send a bunch of 0's! By a bunch, the exact amount is (2^clog2(N+1+L+D))+1
                                 // # Send a full 0 packet to all masters
         0: data_o = width_p ' (23'b0001___1___00000_0_0000___00000000); // 0x0C0000
                                 // # Wait ~32 cycles
         1: data_o = width_p ' (23'b0110___0000000000000100000); // 0x300020
         2: data_o = width_p ' (23'b0101___0000000000000000000); // 0x280000
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG CLIENTS
                                 // #
                                 // # Next, we should reset each client node. To do this we send a packet
                                 // # that has all 1's for data, and has data_not_reset=0. The nodeID should
                                 // # be the ID of the client we are reseting, and length should be the
                                 // # corrent length of the packet. We should send this packet to each client.
                                 // #SEND  en   id=0  r l=1
         3: data_o = width_p ' (23'b0001___1___00000_0_0001___00000001); // 0x0C0101
                                 // #SEND  en   id=1  r l=5
         4: data_o = width_p ' (23'b0001___1___00001_0_0101___00011111); // 0x0C251F
                                 // #SEND  en   id=2  r l=5
         5: data_o = width_p ' (23'b0001___1___00010_0_0101___00011111); // 0x0C451F
                                 // #SEND  en   id=3  r l=5
         6: data_o = width_p ' (23'b0001___1___00011_0_0101___00011111); // 0x0C651F
                                 // #SEND  en   id=4  r l=5
         7: data_o = width_p ' (23'b0001___1___00100_0_0101___00011111); // 0x0C851F
                                 // #SEND  en   id=5  r l=1
         8: data_o = width_p ' (23'b0001___1___00101_0_0001___00000001); // 0x0CA101
                                 // #SEND  en   id=6  r l=1
         9: data_o = width_p ' (23'b0001___1___00110_0_0001___00000001); // 0x0CC101
                                 // #SEND  en   id=7  r l=1
        10: data_o = width_p ' (23'b0001___1___00111_0_0001___00000001); // 0x0CE101
                                 // #SEND  en   id=8  r l=1
        11: data_o = width_p ' (23'b0001___1___01000_0_0001___00000001); // 0x0D0101
                                 // #SEND  en   id=9  r l=3
        12: data_o = width_p ' (23'b0001___1___01001_0_0011___00000111); // 0x0D2307
                                 // #SEND  en   id=10  r l=8
        13: data_o = width_p ' (23'b0001___1___01010_0_1000___11111111); // 0x0D48FF
                                 // #SEND  en   id=11  r l=8
        14: data_o = width_p ' (23'b0001___1___01011_0_1000___11111111); // 0x0D68FF
                                 // #SEND  en   id=12  r l=8
        15: data_o = width_p ' (23'b0001___1___01100_0_1000___11111111); // 0x0D88FF
                                 // #SEND  en   id=13  r l=8
        16: data_o = width_p ' (23'b0001___1___01101_0_1000___11111111); // 0x0DA8FF
                                 // #SEND  en   id=14  r l=8
        17: data_o = width_p ' (23'b0001___1___01110_0_1000___11111111); // 0x0DC8FF
                                 // #SEND  en   id=15  r l=8
        18: data_o = width_p ' (23'b0001___1___01111_0_1000___11111111); // 0x0DE8FF
                                 // #SEND  en   id=16  r l=8
        19: data_o = width_p ' (23'b0001___1___10000_0_1000___11111111); // 0x0E08FF
                                 // #SEND  en   id=17  r l=8
        20: data_o = width_p ' (23'b0001___1___10001_0_1000___11111111); // 0x0E28FF
                                 // #SEND  en   id=18  r l=8
        21: data_o = width_p ' (23'b0001___1___10010_0_1000___11111111); // 0x0E48FF
                                 // #SEND  en   id=19  r l=8
        22: data_o = width_p ' (23'b0001___1___10011_0_1000___11111111); // 0x0E68FF
                                 // #SEND  en   id=20  r l=8
        23: data_o = width_p ' (23'b0001___1___10100_0_1000___11111111); // 0x0E88FF
                                 // #SEND  en   id=21  r l=8
        24: data_o = width_p ' (23'b0001___1___10101_0_1000___11111111); // 0x0EA8FF
                                 // #SEND  en   id=22  r l=8
        25: data_o = width_p ' (23'b0001___1___10110_0_1000___11111111); // 0x0EC8FF
                                 // #SEND  en   id=23  r l=1
        26: data_o = width_p ' (23'b0001___1___10111_0_0001___00000001); // 0x0EE101
                                 // #SEND  en   id=24  r l=1
        27: data_o = width_p ' (23'b0001___1___11000_0_0001___00000001); // 0x0F0101
                                 // #SEND  en   id=25  r l=5
        28: data_o = width_p ' (23'b0001___1___11001_0_0101___00011111); // 0x0F251F
                                 // #SEND  en   id=26  r l=1
        29: data_o = width_p ' (23'b0001___1___11010_0_0001___00000001); // 0x0F4101
                                 // #SEND  en   id=27  r l=7
        30: data_o = width_p ' (23'b0001___1___11011_0_0111___01111111); // 0x0F677F
                                 // ################################################################################
                                 // #
                                 // # START CONFIGURATION
                                 // #
                                 // # The bsg tag network is now live! We can begin our configuration.
                                 // #	 24	 | Clkgen Async Reset				 | 1-bit
                                 // #	 25  | Clkgen Oscillator      			 | 5-bits
                                 // #    26  | Clkgen Osc Trigger     			 | 1-bit
                                 // #    27  | Clkgen Downsampler    			 | 7-bits
                                 // ### Async clk-gen reset to get things moving
                                 // #SEND  en   id=24   d l=1    {async_reset}
        31: data_o = width_p ' (23'b0001___1___11000_1_0001___00000000); // 0x0F1100
        32: data_o = width_p ' (23'b0001___1___11000_1_0001___00000001); // 0x0F1101
        33: data_o = width_p ' (23'b0001___1___11000_1_0001___00000000); // 0x0F1100
                                 // ### Set osc triggers low
                                 // #SEND  en   id=26   d l=1    {trigger}
        34: data_o = width_p ' (23'b0001___1___11010_1_0001___00000000); // 0x0F5100
                                 // ### Program the raw oscillators speed
                                 // #SEND  en   id=25   d l=5    {adt, cdt, fdt}
        35: data_o = width_p ' (23'b0001___1___11001_1_0101___00011011); // 0x0F3500
                                 // ### Trigger oscillators
                                 // #SEND  en   id=26   d l=1    {trigger}
        36: data_o = width_p ' (23'b0001___1___11010_1_0001___00000001); // 0x0F5101
        37: data_o = width_p ' (23'b0001___1___11010_1_0001___00000000); // 0x0F5100
                                 // #SEND  en   id=27   d l=7    {ds_val, reset}
        38: data_o = width_p ' (23'b0001___1___11011_1_0111___00000001); // 0x0F7701
        39: data_o = width_p ' (23'b0001___1___11011_1_0111___00000000); // 0x0F7700
                                 // ### Set delay line triggers low
                                 // #SEND  en   id=5  d l=1    {trigger}
        40: data_o = width_p ' (23'b0001___1___00101_1_0001___00000000); // 0x0CB100
                                 // #SEND  en   id=6  d l=1    {trigger}
        41: data_o = width_p ' (23'b0001___1___00110_1_0001___00000000); // 0x0CD100
                                 // #SEND  en   id=7  d l=1    {trigger}
        42: data_o = width_p ' (23'b0001___1___00111_1_0001___00000000); // 0x0CF100
                                 // #SEND  en   id=8  d l=1    {trigger}
        43: data_o = width_p ' (23'b0001___1___01000_1_0001___00000000); // 0x0D1100
                                 // ### Program the delay lines
                                 // #SEND  en   id=1  d l=5    {adt, cdt, fdt}
        44: data_o = width_p ' (23'b0001___1___00001_1_0101___00011111); // 0x0C351F
                                 // #SEND  en   id=2  d l=5    {adt, cdt, fdt}
        45: data_o = width_p ' (23'b0001___1___00010_1_0101___00011111); // 0x0C551F
                                 // #SEND  en   id=3  d l=5    {adt, cdt, fdt}
        46: data_o = width_p ' (23'b0001___1___00011_1_0101___00011111); // 0x0C751F
                                 // #SEND  en   id=4  d l=5    {adt, cdt, fdt}
        47: data_o = width_p ' (23'b0001___1___00100_1_0101___00011111); // 0x0C951F
                                 // ### Trigger delay lines
                                 // #SEND  en   id=5  d l=1    {trigger}
        48: data_o = width_p ' (23'b0001___1___00101_1_0001___00000001); // 0x0CB101
        49: data_o = width_p ' (23'b0001___1___00101_1_0001___00000000); // 0x0CB100
                                 // #SEND  en   id=6  d l=1    {trigger}
        50: data_o = width_p ' (23'b0001___1___00110_1_0001___00000001); // 0x0CD101
        51: data_o = width_p ' (23'b0001___1___00110_1_0001___00000000); // 0x0CD100
                                 // #SEND  en   id=7  d l=1    {trigger}
        52: data_o = width_p ' (23'b0001___1___00111_1_0001___00000001); // 0x0CF101
        53: data_o = width_p ' (23'b0001___1___00111_1_0001___00000000); // 0x0CF100
                                 // #SEND  en   id=8  d l=1    {trigger}
        54: data_o = width_p ' (23'b0001___1___01000_1_0001___00000001); // 0x0D1101
        55: data_o = width_p ' (23'b0001___1___01000_1_0001___00000000); // 0x0D1100
                                 // ### Async delay line reset to get things moving
                                 // #SEND  en   id=0  d l=1    {async_reset}
        56: data_o = width_p ' (23'b0001___1___00000_1_0001___00000000); // 0x0C1100
        57: data_o = width_p ' (23'b0001___1___00000_1_0001___00000001); // 0x0C1101
        58: data_o = width_p ' (23'b0001___1___00000_1_0001___00000000); // 0x0C1100
                                 // ### Set downsamples and reset
                                 // #
                                 // #SEND  en   id=9  d l=2    {ds_val, reset}
        59: data_o = width_p ' (23'b0001___1___01001_1_0011___00000001); // 0x0D3301
        60: data_o = width_p ' (23'b0001___1___01001_1_0011___00000000); // 0x0D3300
                                 // # Reset DMC configs and set dmc_p
                                 // #SEND  en   id=10  d l=8    {trefi[7:0]}
        61: data_o = width_p ' (23'b0001___1___01010_1_1000___11111111); // 0x0D58FF
                                 // #SEND  en   id=11  d l=8    {trefi[15:8]}
        62: data_o = width_p ' (23'b0001___1___01011_1_1000___00000011); // 0x0D7803
                                 // #SEND  en   id=12  d l=8    {trfc, tmrd}
        63: data_o = width_p ' (23'b0001___1___01100_1_1000___11110001); // 0x0D98F1
                                 // #SEND  en   id=13  d l=8    {trp, trc}
        64: data_o = width_p ' (23'b0001___1___01101_1_1000___00111011); // 0x0DB83B
                                 // #SEND  en   id=14  d l=8    {trrd, tras}
        65: data_o = width_p ' (23'b0001___1___01110_1_1000___00101000); // 0x0DD828
                                 // #SEND  en   id=15  d l=8    {twr, trcd}
        66: data_o = width_p ' (23'b0001___1___01111_1_1000___10110010); // 0x0DF8B2
                                 // #SEND  en   id=16  d l=8    {trtp, twtr}
        67: data_o = width_p ' (23'b0001___1___10000_1_1000___10101001); // 0x0E18A9
                                 // #SEND  en   id=17  d l=8    {dqs_sel_cal, cas}
        68: data_o = width_p ' (23'b0001___1___10001_1_1000___00110011); // 0x0E3833
                                 // #SEND  en   id=18  d l=8    {row_width, col_width}
        69: data_o = width_p ' (23'b0001___1___10010_1_1000___11101011); // 0x0E58EB
                                 // #SEND  en   id=19  d l=8    {bank_pos, bank_width}
        70: data_o = width_p ' (23'b0001___1___10011_1_1000___01100110); // 0x0E7866
                                 // #SEND  en   id=20  d l=8    {init_cycles[7:0]}
        71: data_o = width_p ' (23'b0001___1___10100_1_1000___01001010); // 0x0E984A
                                 // #SEND  en   id=21  d l=8    {init_cycles[15:8]}
        72: data_o = width_p ' (23'b0001___1___10101_1_1000___10011100); // 0x0EB89C
                                 // #SEND  en   id=22  d l=8    {reset}
        73: data_o = width_p ' (23'b0001___1___10110_1_1000___00000001); // 0x0ED801
        74: data_o = width_p ' (23'b0001___1___10110_1_1000___00000000); // 0x0ED800
                                 // # SEND en  id=23 d l=8     {stall_transmission}
                                 // #0001___1___10111_1_1000___00000000
                                 // ################################################################################
                                 // #
                                 // # Done!
                                 // #
                                 // # Configuration is complete and we are out of reset. We should indicate we are
                                 // # done to allow the next part of the testbench to come alive.
                                 // # Assert done_o
        75: data_o = width_p ' (23'b0011___0000000000000000000); // 0x180000
   default: data_o = 'X;
endcase
endmodule
`BSG_ABSTRACT_MODULE(bsg_tag_boot_rom)
